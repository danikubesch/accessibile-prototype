// colors
$light: #ffffff;
$dark: #000000;
$grey-light: #f5f5f5;
$grey-medium: #e0dede;
$grey-dark: #363636;
$violet: #6a197d;
$green: #438a5e;
$green-darker: #38714e;
$blue: #0e9aa7;
$blue-darker: #0c818c;
$orange: #ff9800;
$orange-darker: #d77f00;

// Convert font-size from PX to REM with PX fallback
$base-font-size: 16;

@function parse-int($n) {
    @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
    $px: ();
    $rem: ();

    $root: $base-font-size;

    @each $value in $values {
        @if $value == 0 or $value == auto {
            $px: append($px, $value);
            $rem: append($rem, $value);
        } @else if type-of($value) == number {
            $unit: unit($value);
            $val: parse-int($value);

            @if $unit == "px" {
                $px: append($px, $value);
                $rem: append($rem, ($val / $root + rem));
            }

            @if $unit == "rem" {
                $px: append($px, ($val * $root + px));
                $rem: append($rem, $value);
            }
        } @else {
            $px: append($px, $value);
            $rem: append($rem, $value);
        }
    }

    @if $px == $rem {
        #{$property}: $px;
    } @else {
        #{$property}: $px;
        #{$property}: $rem;
    }
}

@function rem($value) {
    $root: $base-font-size;
    $val: parse-int($value);
    $return: ();

    @if unit($value) == "px" {
        $return: append($return, ($val / $root + rem));
    } @else {
        $return: append($return, ($val * $root + px));
    }

    @return $return;
}
